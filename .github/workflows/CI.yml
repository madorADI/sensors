name: CI

on: [push, pull_request, workflow_dispatch]

permissions:
  contents: read

jobs:
  test:
    if: false
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.7", "3.11", "pypy3.9"]
        os: [windows-latest, macos-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip -r requirements.txt || true
      - name: Run tests for ${{ matrix.python-version }}
        run: python -m pytest -vv || true
  build-docker:
    # needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build container
        uses: docker/build-push-action@v4
        with:
          tags: adi/sensors:latest
          outputs: type=docker,dest=sensorsimage.tar
      - uses: actions/upload-artifact@v3
        with:
          name: sensors
          path: sensorsimage.tar
  deploy:
    needs: build-docker
    if: github.repository_owner == 'madorADI' #github.ref_name == 'main' && github.repository_owner == 'madorADI'
    concurrency: production
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_DEPLOY_PRIVATE_KEY }}
          known_hosts: unnecessary
      - name: Add known hosts
        run: ssh-keyscan -H ${{ secrets.DEPLOY_IP }} >> ~/.ssh/known_hosts
      - uses: actions/download-artifact@v3
        with:
          name: sensors
      - name: Upload image to remote
        run: rsync -avz sensorsimage.tar ${{ secrets.SSH_DEPLOY_USER }}@${{ secrets.DEPLOY_IP }}:sensorsimage.tar
      - name: Start app
        run: ssh ${{ secrets.SSH_DEPLOY_USER }}@${{ secrets.DEPLOY_IP }} "docker load -i sensorsimage.tar && docker rm -f sensors && docker run --name sensors -d adi/sensors:latest"
